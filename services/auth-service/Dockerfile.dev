# Multi-stage Dockerfile para Auth Service (Development) - OPTIMIZADO PARA HARDWARE LIMITADO
FROM node:22-alpine AS base

# Instalar herramientas del sistema
RUN apk add --no-cache \
    curl \
    postgresql-client \
    redis \
    netcat-openbsd \
    dumb-init

# Instalar pnpm globalmente
RUN npm install -g pnpm@latest

# Crear directorio de trabajo
WORKDIR /app

# Crear usuario no-root para seguridad
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001 -G nodejs

# ==============================================
FROM base AS dependencies

# Copiar archivos de configuración de dependencias
COPY services/auth-service/package.json ./package.json
COPY pnpm-lock.yaml ./pnpm-lock.yaml

# Instalar dependencias (incluyendo dev para desarrollo)
RUN pnpm install --no-frozen-lockfile

# ==============================================
FROM base AS development

# Copiar node_modules desde la etapa de dependencias
COPY --from=dependencies /app/node_modules ./node_modules
COPY --from=dependencies /app/package.json ./package.json
COPY --from=dependencies /app/pnpm-lock.yaml ./pnpm-lock.yaml

# Copiar código fuente del servicio
COPY services/auth-service/. .

# Copiar configuración TypeScript base
COPY tsconfig.base.json /tsconfig.base.json

# Copiar y configurar prisma
COPY services/auth-service/prisma ./prisma

# Crear directorios necesarios ANTES de cambiar usuario
RUN mkdir -p /app/dist && \
    mkdir -p /app/.tsbuildinfo && \
    mkdir -p /app/logs && \
    chmod 755 /app/dist && \
    chmod 755 /app/.tsbuildinfo && \
    chmod 755 /app/logs

# Generar cliente Prisma
RUN pnpm prisma:generate

# Copiar script de inicio
COPY services/auth-service/docker-entrypoint.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/docker-entrypoint.sh

# Cambiar ownership al usuario nodejs
RUN chown -R nodejs:nodejs /app && \
    chown nodejs:nodejs /usr/local/bin/docker-entrypoint.sh

# Cambiar a usuario no-root
USER nodejs

# Exponer puerto del auth service
EXPOSE 3001

# Variables de entorno para desarrollo
ENV NODE_ENV=development
ENV SERVICE_NAME=auth-service

# ✅ HEALTH CHECK COHERENTE PARA HARDWARE LIMITADO
HEALTHCHECK --interval=60s --timeout=30s --start-period=480s --retries=8 \
    CMD curl -f --max-time 30 --connect-timeout 10 http://localhost:3001/api/v1/health || exit 1

# Usar dumb-init para manejo correcto de señales
ENTRYPOINT ["dumb-init", "--", "docker-entrypoint.sh"]
CMD ["pnpm", "run", "dev:watch"]