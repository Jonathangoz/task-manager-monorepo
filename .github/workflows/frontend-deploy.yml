name: Deploy Frontend

on:
  push:
    branches: [main, develop]
    paths:
      - 'frontend/task-frontend/**'
      - 'shared/**'
      - 'pnpm-lock.yaml'
      - '.github/workflows/frontend-deploy.yml'
  pull_request:
    branches: [main]
    paths:
      - 'frontend/task-frontend/**'
      - 'shared/**'

env:
  NODE_VERSION: '22'
  PNPM_VERSION: '9'

jobs:
  # ============= TESTING JOB =============
  test:
    name: Test Frontend
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Lint
        run: pnpm --filter task-frontend lint:check

      - name: Type check
        run: pnpm --filter task-frontend type-check

      - name: Run tests
        run: pnpm --filter task-frontend test:ci
        env:
          NODE_ENV: test

      - name: Build
        run: pnpm --filter task-frontend build
        env:
          NEXT_PUBLIC_AUTH_SERVICE_URL: https://test-auth-service.render.com/api/v1
          NEXT_PUBLIC_TASK_SERVICE_URL: https://test-task-service.render.com/api/v1

  # ============= DEPLOY JOB =============
  deploy:
    name: Deploy to Render
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Deploy to Render
        uses: renderinc/render-action@v0.6.0
        with:
          api-key: ${{ secrets.RENDER_API_KEY }}
          service-id: ${{ secrets.RENDER_FRONTEND_SERVICE_ID }}
          wait: true

      - name: Health Check
        run: |
          sleep 60
          curl -f ${{ secrets.FRONTEND_URL }} || exit 1

      - name: Notify deployment
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          message: |
            Frontend deployment ${{ job.status }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}: Build Auth Service
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma client
        run: pnpm --filter task-manager-auth-service prisma:generate

      - name: Build
        run: pnpm --filter task-manager-auth-service build

      - name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: |
            services/auth-service/dist
            services/auth-service/node_modules/.prisma
          key: ${{ runner.os }}-auth-build-${{ github.sha }}

  # ============= DEPLOY JOB =============
  deploy:
    name: Deploy to Render
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Deploy to Render
        uses: renderinc/render-action@v0.6.0
        with:
          api-key: ${{ secrets.RENDER_API_KEY }}
          service-id: ${{ secrets.RENDER_AUTH_SERVICE_ID }}
          wait: true

      - name: Health Check
        run: |
          sleep 30
          curl -f ${{ secrets.AUTH_SERVICE_URL }}/api/v1/health || exit 1

      - name: Notify deployment
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          message: |
            Auth Service deployment ${{ job.status }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}