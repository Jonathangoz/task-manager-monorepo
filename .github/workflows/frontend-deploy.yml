# .github/workflows/frontend-deploy.yml
name: 🎨 Frontend CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'frontend/**'
      - 'shared/**'
      - '.github/workflows/frontend-deploy.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'frontend/**'
      - 'shared/**'

env:
  NODE_VERSION: '20'
  SERVICE_PATH: './frontend/task-manager-ui'

jobs:
  # ✅ Análisis de Código y Testing
  test:
    name: 🧪 Tests & Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.SERVICE_PATH }}/package-lock.json

      - name: 📦 Install Dependencies
        working-directory: ${{ env.SERVICE_PATH }}
        run: npm ci

      - name: 🔍 Lint Code
        working-directory: ${{ env.SERVICE_PATH }}
        run: npm run lint

      - name: 🎨 Check Code Format
        working-directory: ${{ env.SERVICE_PATH }}
        run: npm run format:check

      - name: 🏗️ Type Check
        working-directory: ${{ env.SERVICE_PATH }}
        run: npm run type-check

      - name: 🧪 Run Unit Tests
        working-directory: ${{ env.SERVICE_PATH }}
        env:
          NEXT_PUBLIC_AUTH_SERVICE_URL: https://mock-auth-service.com/api/v1
          NEXT_PUBLIC_TASK_SERVICE_URL: https://mock-task-service.com/api/v1
        run: npm run test:coverage

      - name: 🧪 Run Component Tests
        working-directory: ${{ env.SERVICE_PATH }}
        env:
          NEXT_PUBLIC_AUTH_SERVICE_URL: https://mock-auth-service.com/api/v1
          NEXT_PUBLIC_TASK_SERVICE_URL: https://mock-task-service.com/api/v1
        run: npm run test:components

      - name: 📊 Upload Coverage Reports
        uses: codecov/codecov-action@v4
        with:
          files: ${{ env.SERVICE_PATH }}/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  # 🏗️ Build Test
  build-test:
    name: 🏗️ Build Test
    runs-on: ubuntu-latest
    needs: test

    strategy:
      matrix:
        environment: [staging, production]

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.SERVICE_PATH }}/package-lock.json

      - name: 📦 Install Dependencies
        working-directory: ${{ env.SERVICE_PATH }}
        run: npm ci

      - name: 🏗️ Build for Staging
        if: matrix.environment == 'staging'
        working-directory: ${{ env.SERVICE_PATH }}
        env:
          NEXT_PUBLIC_AUTH_SERVICE_URL: ${{ vars.AUTH_SERVICE_STAGING_URL }}/api/v1
          NEXT_PUBLIC_TASK_SERVICE_URL: ${{ vars.TASK_SERVICE_STAGING_URL }}/api/v1
          NEXT_PUBLIC_APP_NAME: Task Manager Pro (Staging)
          NEXT_PUBLIC_APP_VERSION: ${{ github.sha }}
        run: npm run build

      - name: 🏗️ Build for Production
        if: matrix.environment == 'production'
        working-directory: ${{ env.SERVICE_PATH }}
        env:
          NEXT_PUBLIC_AUTH_SERVICE_URL: ${{ vars.AUTH_SERVICE_PRODUCTION_URL }}/api/v1
          NEXT_PUBLIC_TASK_SERVICE_URL: ${{ vars.TASK_SERVICE_PRODUCTION_URL }}/api/v1
          NEXT_PUBLIC_APP_NAME: Task Manager Pro
          NEXT_PUBLIC_APP_VERSION: ${{ github.sha }}
        run: npm run build

      - name: 📁 Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.environment }}
          path: ${{ env.SERVICE_PATH }}/.next
          retention-days: 1

  # 🔗 Dependency Check (verifica que los servicios backend estén disponibles)
  check-dependencies:
    name: 🔗 Check Backend Services
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'

    steps:
      - name: 🔍 Check Backend Services (Staging)
        if: github.ref == 'refs/heads/develop'
        run: |
          echo "🔍 Checking backend services staging availability..."
          
          # Check Auth Service
          curl -f ${{ vars.AUTH_SERVICE_STAGING_URL }}/api/v1/health || {
            echo "❌ Auth Service staging is not available. Deployment aborted."
            exit 1
          }
          
          # Check Task Service
          curl -f ${{ vars.TASK_SERVICE_STAGING_URL }}/api/v1/health || {
            echo "❌ Task Service staging is not available. Deployment aborted."
            exit 1
          }
          
          echo "✅ All backend services staging are healthy!"

      - name: 🔍 Check Backend Services (Production)
        if: github.ref == 'refs/heads/main'
        run: |
          echo "🔍 Checking backend services production availability..."
          
          # Check Auth Service
          curl -f ${{ vars.AUTH_SERVICE_PRODUCTION_URL }}/api/v1/health || {
            echo "❌ Auth Service production is not available. Deployment aborted."
            exit 1
          }
          
          # Check Task Service
          curl -f ${{ vars.TASK_SERVICE_PRODUCTION_URL }}/api/v1/health || {
            echo "❌ Task Service production is not available. Deployment aborted."
            exit 1
          }
          
          echo "✅ All backend services production are healthy!"

  # 🚀 Deploy to Staging (develop branch)
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-test, check-dependencies]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    environment:
      name: staging
      url: ${{ vars.FRONTEND_STAGING_URL }}

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📁 Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-staging
          path: ${{ env.SERVICE_PATH }}/.next

      - name: 🚀 Deploy to Render Staging
        uses: johnbeynon/render-deploy-action@v0.0.8
        with:
          service-id: ${{ secrets.RENDER_FRONTEND_STAGING_ID }}
          api-key: ${{ secrets.RENDER_API_KEY }}
          wait-for-success: true

      - name: 🔍 Health Check Staging
        run: |
          echo "🏥 Waiting for staging frontend to be ready..."
          sleep 45
          curl -f ${{ vars.FRONTEND_STAGING_URL }} || exit 1
          echo "✅ Staging deployment successful!"

      - name: 🧪 E2E Smoke Tests on Staging
        run: |
          echo "🧪 Running E2E smoke tests on staging..."
          # Basic connectivity tests
          curl -I ${{ vars.FRONTEND_STAGING_URL }} | grep "200 OK"
          echo "✅ E2E smoke tests passed!"

  # 🌟 Deploy to Production (main branch)
  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-test, check-dependencies]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment:
      name: production
      url: ${{ vars.FRONTEND_PRODUCTION_URL }}

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📁 Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-production
          path: ${{ env.SERVICE_PATH }}/.next

      - name: 🌟 Deploy to Render Production
        uses: johnbeynon/render-deploy-action@v0.0.8
        with:
          service-id: ${{ secrets.RENDER_FRONTEND_PRODUCTION_ID }}
          api-key: ${{ secrets.RENDER_API_KEY }}
          wait-for-success: true

      - name: 🔍 Health Check Production
        run: |
          echo "🏥 Waiting for production frontend to be ready..."
          sleep 45
          curl -f ${{ vars.FRONTEND_PRODUCTION_URL }} || exit 1
          echo "✅ Production deployment successful!"

      - name: 🧪 E2E Smoke Tests on Production
        run: |
          echo "🧪 Running E2E smoke tests on production..."
          curl -I ${{ vars.FRONTEND_PRODUCTION_URL }} | grep "200 OK"
          echo "✅ E2E smoke tests passed!"

      - name: 📢 Notify Deployment Success
        if: success()
        run: |
          echo "🎉 Frontend deployed successfully to production!"
          echo "🔗 URL: ${{ vars.FRONTEND_PRODUCTION_URL }}"

  # 🔍 Lighthouse Performance Audit (solo en producción)
  lighthouse-audit:
    name: 🔍 Lighthouse Performance Audit
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔍 Run Lighthouse Audit
        uses: treosh/lighthouse-ci-action@v12
        with:
          urls: |
            ${{ vars.FRONTEND_PRODUCTION_URL }}
            ${{ vars.FRONTEND_PRODUCTION_URL }}/login
            ${{ vars.FRONTEND_PRODUCTION_URL }}/dashboard
          uploadArtifacts: true
          temporaryPublicStorage: true

  # 🏗️ Build Docker Image (for manual deployments)
  build-docker:
    name: 🐳 Build Docker Image
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔑 Log in to Docker Hub
        if: github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 🏗️ Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ${{ env.SERVICE_PATH }}
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/task-manager-frontend:latest
            ${{ secrets.DOCKER_USERNAME }}/task-manager-frontend:${{ github.sha }}
          build-args: |
            NEXT_PUBLIC_AUTH_SERVICE_URL=${{ vars.AUTH_SERVICE_PRODUCTION_URL }}/api/v1
            NEXT_PUBLIC_TASK_SERVICE_URL=${{ vars.TASK_SERVICE_PRODUCTION_URL }}/api/v1
            NEXT_PUBLIC_APP_NAME=Task Manager Pro
            NEXT_PUBLIC_APP_VERSION=${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max