name: 🔐 Auth Service CI/CD

on:
  push:
    branches: [main, develop]
    paths:
      - 'services/auth-service/**'
      - 'shared/**'
      - 'pnpm-lock.yaml'
      - '.github/workflows/auth-service-deploy.yml'
  pull_request:
    branches: [main]
    paths:
      - 'services/auth-service/**'
      - 'shared/**'

env:
  NODE_VERSION: '22'
  PNPM_VERSION: '10'
  SERVICE_PATH: './services/auth-service'

jobs:
  # ✅ Testing y Quality Checks
  test:
    name: 🧪 Tests & Code Quality
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_DB: auth_test_db
          POSTGRES_USER: auth_test_user
          POSTGRES_PASSWORD: auth_test_password
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 🗂️ Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: 💾 Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: 📦 Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔍 Lint Code
        run: pnpm --filter task-manager-auth-service lint:check

      - name: 🏗️ Generate Prisma Client
        run: pnpm --filter task-manager-auth-service prisma:generate
        env:
          DATABASE_URL: postgresql://auth_test_user:auth_test_password@localhost:5432/auth_test_db

      - name: 🏗️ Build Application
        run: pnpm --filter task-manager-auth-service build

    #    ❌ TESTS COMENTADOS - Solo para desarrollo local
    #  - name: 🧪 Run Tests
    #    run: pnpm --filter task-manager-auth-service test:coverage
    #    env:
    #      NODE_ENV: test
    #      DATABASE_URL: postgresql://auth_test_user:auth_test_password@localhost:5432/auth_test_db
    #      REDIS_URL: redis://localhost:6379
    #      JWT_SECRET: base64:dGVzdC1qd3Qtc2VjcmV0LXN1cGVyLXNlY3VyZS1mb3ItdGVzdGluZy1vbmx5LTY0LWNoYXJzLWhlcmU=
    #      REFRESH_TOKEN_SECRET: base64:dGVzdC1yZWZyZXNoLXNlY3JldC1zdXBlci1zZWN1cmUtZm9yLXRlc3Rpbmctb25seS02NC1jaGFycw==
    #      JWE_SECRET: base64:dGVzdC1qd2Utc2VjcmV0LTMyLWNoYXJzLWV4YWN0bHk=

    #  - name: 📊 Upload Coverage Reports
    #    uses: codecov/codecov-action@v4
    #    with:
    #      file: ${{ env.SERVICE_PATH }}/coverage/lcov.info
    #      flags: auth-service
    #      name: auth-service-coverage
    #    env:
    #      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  # 🌟 Deploy to Production (main branch)
  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    environment:
      name: task-manager
      url: ${{ vars.AUTH_SERVICE_PRODUCTION_URL }}

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🚀 Trigger Render Deployment
        id: deploy
        uses: johnbeynon/render-deploy-action@v0.0.8
        with:
          # ✅ Opciones correctas: solo service-id y api-key
          service-id: ${{ secrets.RENDER_AUTH_SERVICE_PRODUCTION_ID }}
          api-key: ${{ secrets.RENDER_API_KEY }}

      - name: 🩺 Health Check Production (con reintentos)
        run: |
          echo "🚀 Deploy triggered on Render. Waiting for the new version to go live..."
          # Una espera inicial de 60 segundos para darle tiempo a Render a iniciar el proceso
          sleep 60 

          # Bucle de reintentos por hasta 5 minutos (20 intentos * 15s = 300s)
          for i in {1..20}; do
            # ✅ Usamos el endpoint '/ready' porque es el que asegura que las dependencias están listas
            response_code=$(curl -o /dev/null -s -w "%{http_code}" "${{ vars.AUTH_SERVICE_PRODUCTION_URL }}/api/v1/health/ready")
            
            if [ "$response_code" -eq 200 ]; then
              echo "✅ Health check passed with status 200 on attempt $i."
              exit 0
            fi
            
            echo "Attempt $i: Health check failed with status $response_code. Retrying in 15 seconds..."
            sleep 15
          done

          echo "❌ Health check failed after multiple attempts."
          exit 1

      - name: 📢 Notify Deployment Success
        if: success()
        run: |
          echo "🎉 Auth Service deployed successfully to production!"
          echo "🔗 URL: ${{ vars.AUTH_SERVICE_PRODUCTION_URL }}"
