name: Deploy Auth Service

on:
  push:
    branches: [main, develop]
    paths:
      - 'services/auth-service/**'
      - 'shared/**'
      - 'pnpm-lock.yaml'
      - '.github/workflows/auth-service-deploy.yml'
  pull_request:
    branches: [main]
    paths:
      - 'services/auth-service/**'
      - 'shared/**'

env:
  NODE_VERSION: '22'
  PNPM_VERSION: '9'

jobs:
  # ============= TESTING JOB =============
  test:
    name: Test Auth Service
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: auth_test_db
          POSTGRES_USER: auth_test_user
          POSTGRES_PASSWORD: auth_test_password
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Lint
        run: pnpm --filter task-manager-auth-service lint:check

      - name: Type check
        run: pnpm --filter task-manager-auth-service type-check

      - name: Generate Prisma client
        run: pnpm --filter task-manager-auth-service prisma:generate
        env:
          DATABASE_URL: postgresql://auth_test_user:auth_test_password@localhost:5432/auth_test_db

      - name: Run database migrations
        run: pnpm --filter task-manager-auth-service db:migrate
        env:
          DATABASE_URL: postgresql://auth_test_user:auth_test_password@localhost:5432/auth_test_db

      - name: Run tests
        run: pnpm --filter task-manager-auth-service test:ci
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://auth_test_user:auth_test_password@localhost:5432/auth_test_db
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-jwt-secret-super-secure-for-testing-only-64-chars
          REFRESH_TOKEN_SECRET: test-refresh-secret-super-secure-for-testing-only-64-chars
          JWE_SECRET: test-jwe-secret-32-chars-exactly

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./services/auth-service/coverage/lcov.info
          flags: auth-service
          name: auth-service-coverage

  # ============= BUILD JOB =============
  build:
    name: Build Task Service
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma client
        run: pnpm --filter task-manager-task-service prisma:generate

      - name: Build
        run: pnpm --filter task-manager-task-service build

      - name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: |
            services/task-service/dist
            services/task-service/node_modules/.prisma
          key: ${{ runner.os }}-task-build-${{ github.sha }}

  # ============= DEPLOY JOB =============
  deploy:
    name: Deploy to Render
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Deploy to Render
        uses: renderinc/render-action@v0.6.0
        with:
          api-key: ${{ secrets.RENDER_API_KEY }}
          service-id: ${{ secrets.RENDER_TASK_SERVICE_ID }}
          wait: true

      - name: Health Check
        run: |
          sleep 30
          curl -f ${{ secrets.TASK_SERVICE_URL }}/api/v1/health || exit 1

      - name: Notify deployment
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          message: |
            Task Service deployment ${{ job.status }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}